import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.StringWriter;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.OutputKeys;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;
import javax.xml.xpath.XPath;
import javax.xml.xpath.XPathConstants;
import javax.xml.xpath.XPathExpressionException;
import javax.xml.xpath.XPathFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.xml.sax.SAXException;


public class NodeCreator {

	
	
	
	
	public static Node createIfNotExists(Document document, String path, String value) {
		String[] pathComponents = path.split("\\/");
		

		System.out.println("Components: "+pathComponents);
		String currentPath = "";
		
		XPathFactory xpathFactory = XPathFactory.newInstance();
		XPath xpath = xpathFactory.newXPath();
		
		Node previousNode = document;
		
		for (String pathComponent : pathComponents) {

			if (pathComponent.length()==0) {
				continue;
			}
			currentPath+="/"+pathComponent;
			
			
			System.out.println("CurrentPath: "+currentPath);
			try {
				Node val = (Node) xpath.compile(currentPath).evaluate(document, XPathConstants.NODE);

				System.out.println("CurrentValue: "+val);
				
				if (val == null) {
					
					System.out.println("Does not exist->create");
				}
				
				
			} catch (XPathExpressionException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		
		return null;
	} 
	

	
	public static void createElement(String addnode){

	try {
        String filepath = "fhirPatient.xml";
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
        Document doc = docBuilder.parse(filepath);

        // Get the excludeList element by tag name directly
        Node rootNode = doc.getElementsByTagName("Patient").item(0);
        //Node rootNode = doc.getDocumentElement();
        	
        // append a new node 
        Element tobeadded = doc.createElement(addnode);
        //tobeadded.appendChild(doc.createTextNode(""));
        rootNode.appendChild(tobeadded);
        
        // write the content into xml file
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();

        DOMSource source = new DOMSource(doc);
        StreamResult result = new StreamResult(new File(filepath));
        
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
		
        transformer.transform(source, result);

        System.out.println("Done");

       } catch (ParserConfigurationException pce) {
        pce.printStackTrace();
       } catch (TransformerException tfe) {
        tfe.printStackTrace();
       } catch (IOException ioe) {
        ioe.printStackTrace();
       } catch (SAXException sae) {
        sae.printStackTrace();
       }
    }
	
	public static void createSubElement(String addsubnode, String existingnode){
	try {
       
		String filepath = "fhirPatient.xml";
        DocumentBuilderFactory docFactory = DocumentBuilderFactory.newInstance();
        DocumentBuilder docBuilder = docFactory.newDocumentBuilder();
        Document doc = docBuilder.parse(filepath);

        // Get the root element
        Node patient = doc.getFirstChild();

        // Get the excludeList element by tag name directly
        Node node = doc.getElementsByTagName(existingnode).item(0);

		//subnode 
		Element subnode = doc.createElement(addsubnode);
		subnode.appendChild(doc.createTextNode(""));
		patient.appendChild(subnode);
		node.appendChild(subnode);
        
		
        // write the content into xml file
        TransformerFactory transformerFactory = TransformerFactory.newInstance();
        Transformer transformer = transformerFactory.newTransformer();
        
        DOMSource source = new DOMSource(doc);
       // StreamResult result = new StreamResult(new File(filepath));
        StreamResult result = new StreamResult(filepath);
        
        transformer.setOutputProperty(OutputKeys.INDENT, "yes");
		transformer.setOutputProperty("{http://xml.apache.org/xslt}indent-amount", "2");
		
        transformer.transform(source, result);


        System.out.println("Subnode added");

       } catch (ParserConfigurationException pce) {
        pce.printStackTrace();
       } catch (TransformerException tfe) {
        tfe.printStackTrace();
       } catch (IOException ioe) {
        ioe.printStackTrace();
       } catch (SAXException sae) {
        sae.printStackTrace();
       }
    }

}
